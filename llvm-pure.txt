@N = dso_local global i32 -1
@arr = dso_local global [6 x i32] [i32 1, i32 2, i32 33, i32 4, i32 5, i32 6]
declare i32 @getch()
declare i32 @parallel_start()
declare i32 @getfarray(float* )
declare void @putint(i32 )
declare void @putfarray(i32 , float* )
declare void @starttime(i32 )
declare void @stoptime(i32 )
declare i32 @getarray(i32* )
declare void @memset(i32* , i32 , i32 )
declare i32 @getint()
declare void @putarray(i32 , i32* )
declare void @putfloat(float )
declare void @putch(i32 )
declare float @getfloat()
declare void @parallel_end(i32 )
define dso_local i32 @main() 
{
b1:
	%r2 = alloca i32
	%r0 = alloca i32
	store i32 0, i32* %r0
	store i32 0, i32* %r2
	br label %b2
b2:
	%r5 = load i32, i32* %r0
	%r6 = icmp slt i32 %r5, 6
	br i1 %r6, label %b3, label %b4
b3:
	%r8 = load i32, i32* %r2
	%r9 = load i32, i32* %r0
	%r10 = getelementptr inbounds [6 x i32], [6 x i32]* @arr, i32 0, i32 %r9
	%r11 = load i32, i32* %r10
	%r12 = add i32 %r8, %r11
	store i32 %r12, i32* %r2
	%r14 = load i32, i32* %r0
	%r15 = add i32 %r14, 1
	store i32 %r15, i32* %r0
	br label %b2
b4:
	%r18 = load i32, i32* %r2
	ret i32 %r18
}
