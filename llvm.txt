@bb = dso_local global float 0x4034000000000000
declare i32 @getch()
declare i32 @parallel_start()
declare i32 @getfarray(float* )
declare void @putint(i32 )
declare void @putfarray(i32 , float* )
declare void @starttime(i32 )
declare void @stoptime(i32 )
declare i32 @getarray(i32* )
declare void @memset(i32* , i32 , i32 )
declare i32 @getint()
declare void @putarray(i32 , i32* )
declare void @putfloat(float )
declare void @putch(i32 )
declare float @getfloat()
declare void @parallel_end(i32 )
define dso_local i32 @main() 
{
b1:
	%r14 = alloca i32
	%r6 = alloca [20 x i32]
	%r4 = alloca float
	%r2 = alloca i32
	%r0 = alloca i32
	store i32 2, i32* %r0
	store i32 20, i32* %r2
	store float 0x3ff0000000000000, float* %r4
	%r7 = getelementptr inbounds [20 x i32], [20 x i32]* %r6, i32 0, i32 0
	call void @memset(i32* %r7, i32 0, i32 80)
	store i32 1, i32* %r7
	%r10 = getelementptr inbounds i32, i32* %r7, i32 1
	store i32 2, i32* %r10
	%r12 = getelementptr inbounds i32, i32* %r7, i32 2
	store i32 0, i32* %r12
	store i32 0, i32* %r14
	br label %b2
b2:
	%r17 = load i32, i32* %r0
	%r18 = icmp slt i32 %r17, 20
	br i1 %r18, label %b3, label %b4
b3:
	%r20 = load i32, i32* %r0
	%r21 = getelementptr inbounds [20 x i32], [20 x i32]* %r6, i32 0, i32 %r20
	%r22 = load i32, i32* %r0
	%r23 = getelementptr inbounds [20 x i32], [20 x i32]* %r6, i32 0, i32 %r22
	%r24 = load i32, i32* %r23
	%r25 = load i32, i32* %r0
	%r26 = sub i32 %r25, 1
	%r27 = getelementptr inbounds [20 x i32], [20 x i32]* %r6, i32 0, i32 %r26
	%r28 = load i32, i32* %r27
	%r29 = add i32 %r24, %r28
	%r30 = load i32, i32* %r0
	%r31 = sub i32 %r30, 2
	%r32 = getelementptr inbounds [20 x i32], [20 x i32]* %r6, i32 0, i32 %r31
	%r33 = load i32, i32* %r32
	%r34 = add i32 %r29, %r33
	store i32 %r34, i32* %r21
	%r36 = load i32, i32* %r14
	%r37 = load i32, i32* %r0
	%r38 = getelementptr inbounds [20 x i32], [20 x i32]* %r6, i32 0, i32 %r37
	%r39 = load i32, i32* %r38
	%r40 = add i32 %r36, %r39
	store i32 %r40, i32* %r14
	%r42 = load i32, i32* %r0
	%r43 = getelementptr inbounds [20 x i32], [20 x i32]* %r6, i32 0, i32 %r42
	%r44 = load i32, i32* %r43
	call void @putint(i32 %r44)
	call void @putch(i32 10)
	%r47 = load i32, i32* %r0
	%r48 = add i32 %r47, 1
	store i32 %r48, i32* %r0
	br label %b2
b4:
	%r51 = load i32, i32* %r14
	ret i32 %r51
}
